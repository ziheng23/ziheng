-------------------GraphDrawing-------------------------------------------------
#include<opencv2/opencv.hpp>
#include<iostream>
#define WINDOW_WIDTH 600
#define WINDOW_NAME1 "【绘制图1】"
#define WINDOW_NAME2 "【绘制图2】"

using namespace cv;
using namespace std;

void DrawEllipse(Mat img, double angle)//椭圆
{
 int thickness = 2;
 int lineType = 8;
    ellipse(
        img,
        Point (WINDOW_WIDTH/2,WINDOW_WIDTH/2),
        Size (WINDOW_WIDTH/4,WINDOW_WIDTH/16),
        angle,
        0,
        360,
        Scalar(255,129,0),
        thickness,
        lineType
        );
}

void DrawFilledCircle(Mat img, Point center)//圆形
{
    int thickness = -1;
    int lineType = 8;
    circle(
        img,
        center,
        WINDOW_WIDTH/32,
        Scalar(0,0,255),
        thickness,
        lineType
        );

}

void DrawPolygon(Mat img)//多边形
{
        int lineType = 8;
       //创建一些点
    Point rookPoints[1][20];
   rookPoints[0][0] = Point (WINDOW_WIDTH/4,7*WINDOW_WIDTH/8);
   rookPoints[0][1] = Point (3*WINDOW_WIDTH/4,7*WINDOW_WIDTH/8);
   rookPoints[0][2] = Point (3*WINDOW_WIDTH/4,13*WINDOW_WIDTH/16);
   rookPoints[0][3] = Point (11*WINDOW_WIDTH/16,13*WINDOW_WIDTH/16);
   rookPoints[0][4] = Point (19*WINDOW_WIDTH/32,3*WINDOW_WIDTH/8);
   rookPoints[0][5] = Point (3*WINDOW_WIDTH/4,3*WINDOW_WIDTH/8);
   rookPoints[0][6] = Point (3*WINDOW_WIDTH/4,WINDOW_WIDTH/8);
   rookPoints[0][7] = Point (26*WINDOW_WIDTH/40,WINDOW_WIDTH/8);
   rookPoints[0][8] = Point (26*WINDOW_WIDTH/40,WINDOW_WIDTH/4);
   rookPoints[0][9] = Point (22*WINDOW_WIDTH/40,WINDOW_WIDTH/4);
   rookPoints[0][10] = Point (22*WINDOW_WIDTH/40,WINDOW_WIDTH/8);
   rookPoints[0][11] = Point (18*WINDOW_WIDTH/40,WINDOW_WIDTH/8);
   rookPoints[0][12] = Point (18*WINDOW_WIDTH/40,WINDOW_WIDTH/4);
   rookPoints[0][13] = Point (14*WINDOW_WIDTH/40,WINDOW_WIDTH/4);
   rookPoints[0][14] = Point (14*WINDOW_WIDTH/40,WINDOW_WIDTH/8);
   rookPoints[0][15] = Point (WINDOW_WIDTH/4,WINDOW_WIDTH/8);
   rookPoints[0][16] = Point (WINDOW_WIDTH/4,3*WINDOW_WIDTH/8);
   rookPoints[0][17] = Point (13*WINDOW_WIDTH/32,3*WINDOW_WIDTH/8);
   rookPoints[0][18] = Point (5*WINDOW_WIDTH/16,13*WINDOW_WIDTH/16);
   rookPoints[0][19] = Point (WINDOW_WIDTH/4,13*WINDOW_WIDTH/16);

    const Point* ppt[1] = {rookPoints[0]};
    int npt[] = {20};
    fillPoly(
        img,
        ppt,
        npt,
        1,
        Scalar(255,255,255),
        lineType
        );


}

void DrawLine(Mat img,Point start, Point end)//线
{
    int thickness = 2;
    int lineType = 8;
    line(
        img,
        start,
        end,
        Scalar(0,0,0),
        thickness,
        lineType
        );

}

int main(void)
{
    Mat atomImage = Mat::zeros(WINDOW_WIDTH,WINDOW_WIDTH,CV_8UC3);
    Mat rookImage = Mat::zeros(WINDOW_WIDTH,WINDOW_WIDTH,CV_8UC3);

  DrawEllipse(atomImage,90);
  DrawEllipse(atomImage,0);
  DrawEllipse(atomImage,45);
  DrawEllipse(atomImage,-45);

    DrawFilledCircle(atomImage,Point(WINDOW_WIDTH/2,WINDOW_WIDTH/2));
    DrawPolygon(rookImage);
    rectangle(rookImage,
             Point(0,7*WINDOW_WIDTH/8),
             Point(WINDOW_WIDTH,WINDOW_WIDTH),
             Scalar(0,255,255),
              -1,
              8
             );
    DrawLine(rookImage,Point(0,15*WINDOW_WIDTH/16),
             Point(WINDOW_WIDTH,15*WINDOW_WIDTH/16)
             );
    DrawLine(rookImage,Point(WINDOW_WIDTH/4,7*WINDOW_WIDTH/8),
             Point(WINDOW_WIDTH/4,WINDOW_WIDTH)
        );
    DrawLine(rookImage,Point(WINDOW_WIDTH/2,7*WINDOW_WIDTH/8),
            Point(WINDOW_WIDTH/2,WINDOW_WIDTH)
            );
    DrawLine(rookImage,Point(3*WINDOW_WIDTH/4,7*WINDOW_WIDTH/8),
            Point(3*WINDOW_WIDTH/4,WINDOW_WIDTH)
            );

imshow(WINDOW_NAME1,atomImage);
    moveWindow(WINDOW_NAME1,0,200);
imshow(WINDOW_NAME2,rookImage);
    moveWindow(WINDOW_NAME2,WINDOW_WIDTH,200);

    waitKey(0);
    return 0;

}

------------------------Mat--------------------------------------------------------
#include<iostream>
#include<opencv2/opencv.hpp>
using namespace std;
using namespace cv;

int main()
{
   //直接使用法
    Mat M(720,1080,CV_8UC3,Scalar(0,0,255));
   // randu(M,Scalar::all(0),Scalar::all(255));
    //cout << "M=" << endl << "" << M << endl;
    imshow("尝试",M);
    waitKey(0);

  /*
   通过构造函数初始化
    int sz[3]={2,2,2};
    Mat L(3,sz,CV_8UC,Scalar::all(0));
  */

  /*
   为已存在的IplImage指针创建信息头
   IplImage* img = cvLoadImage("timg.jpeg",1);
    Mat mtx(img);
*/

  /*
   通过create函数进行初始化
 Mat M;
  M.create(4,4,CV_8UC(2));
 cout << "M=" << endl << ""  << M << endl;
 */

 /*
  采用Matlab式初始化方式
  Mat E = Mat::eye(4,4,CV_64F);
   cout << "E=" << endl << ""  << E << endl;
  Mat O = Mat::ones(2,2,CV_32F);
   cout << "O=" << endl << ""  << O << endl;
  Mat Z = Mat::zeros(3,3,CV_8UC1);
   cout << "Z=" << endl << ""  << Z << endl;
 */

  /*
   对矩阵使用逗号分隔式初始化函数
  Mat C = (Mat_<double>(3,3) << 0,-1,0,-1,5,-1,0,-1,0 );
  cout << "C=" << endl << ""  << C << endl;
 */ 

  /*
   通过函数Clone为一个已存在的Mat对象创建一个新的信息头
   Mat RowCLone = C.row(1).clone();
   cout << "RowCLone=" << endl << ""  << RowCLone << endl;
  */
    return 0;
}
------------------------------------------VisitPixel-----------------------------------------------
#include<iostream>
#include<opencv2/opencv.hpp>
using namespace cv;
using namespace std;
 //访问图像像素的三类方法
  void colorReduce(Mat& inputImage,Mat& outputImage,int div)

/*   第一种 用指针访问
{
     outputImage = inputImage.clone();
     int rowNumber = outputImage.rows;
     int colNumber = outputImage.cols*outputImage.channels();
      for(int i=0; i<rowNumber;i++)
      {
            uchar* data = outputImage.ptr<uchar>(i);
          for(int j=0;j<colNumber;j++)
          {
            data[j] = data[j]/div*div +div/2;

          }

      }


  }
*/
 /*  用迭代器操作   []内的是第几个通道
    {
        outputImage = inputImage.clone();
         Mat_<Vec3b>::iterator it = outputImage.begin<Vec3b>();//初始位置的迭代器
         Mat_<Vec3b>::iterator itend = outputImage.end<Vec3b>();//终止位置的迭代器
         for(;it !=itend;++it)
         {
           (*it)[0] = (*it)[0]/div*div + div/2;
           (*it)[1] = (*it)[1]/div*div + div/2;
           (*it)[2] = (*it)[2]/div*div + div/2;
         }
         


     }
  */  

    {
        outputImage = inputImage.clone();
        int rowNumber = outputImage.rows;
        int colNumber = outputImage.cols;
        for(int i=0 ;i< rowNumber ;i++ )
        {
            for(int j=0 ; j<colNumber;j++)
            {
               outputImage.at<Vec3b>(i,j)[0] = outputImage.at<Vec3b>(i,j)[0]/div*div + div/2;//[]内是第几个通道  image.at<Vec3b>(i,j)[channel]=value
                outputImage.at<Vec3b>(i,j)[1] = outputImage.at<Vec3b>(i,j)[1]/div*div + div/2;
               outputImage.at<Vec3b>(i,j)[2] = outputImage.at<Vec3b>(i,j)[2]/div*div + div/2;
            }

        }




    }
  int main()
  {
     Mat srcImage = imread("timg.jpeg");
     imshow("原始图像",srcImage);
     Mat desImage;
      desImage.create(srcImage.rows,srcImage.cols,srcImage.type());
      //记录起始时间
      double time0 = static_cast<double>(getTickCount());
      //调用颜色区域缩减函数
      colorReduce(srcImage,desImage,32);
      //计算运行时间
      time0 = ((double)getTickCount() - time0)/getTickFrequency();
      cout << "此方法运行时间为" << time0 <<"秒" << endl;
      imshow("效果图",desImage);
      waitKey(0);
 
  }
