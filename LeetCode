------ 宝石与石头-------------------------------------------------------------------------
 class Solution {
public:
    int numJewelsInStones(string J, string S) {
        //暴力破解：20ms
        int num_Jewels=0;
        int J_size=J.size();
        int S_size=S.size();
        for(int i=0;i<J_size;i++){
            for(int j=0;j<S_size;j++){
                if(S[j]==J[i]){
                    num_Jewels++;
                }
            }
        }
  
        return num_Jewels;
    }
};
------------转换成小写字母----------------------------------------------------------------
class Solution {
public:
    string toLowerCase(string str) {
       string fin;
        for(int i=0 ; i<str.length(); i++ )
        {
            if(str[i]<='Z' && str[i]>='A')
            {
                str[i]+=32;
                fin.push_back(str[i]);
            }
            else 
                fin.push_back(str[i]);
        
        }
       return fin;
    }
};
----------------删除链表中的节点-------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void deleteNode(ListNode* node) {
        
        node->val = node->next->val;
        node->next=node->next->next;
    }
};
--------------------翻转图像-------------------------------------------------------
class Solution {
public:
    vector<vector<int>> flipAndInvertImage(vector<vector<int>>& A) {
        
        // vector<vector<int>> B;
        int line=A.size();
        int col=A[0].size();
        for(int i=0; i< line; i++)
        {
            for(int j=0; j< col; j++)\
            {    
                if(j<col/2){
                    int temp=A[i][j];
               A[i][j]=A[i][col-j-1];
                 A[i][col-j-1]=temp;   
                }
                if(A[i][j]==1)
                  A[i][j]=0;
                else
                  A[i][j]=1; 
            }
            
        }
        return A;
    }
};
--------------------有序数组的平方-------------------------------------------------
class Solution {
public:
    vector<int> sortedSquares(vector<int>& A) {
        
        vector<int> fin;
        for(int i= 0; i<A.size(); i++)
        {
            A[i]*= A[i];
            fin.push_back(A[i]);
        }
        sort(fin.begin(),fin.end());
        return fin;
    }
};
----------------唯一摩尔斯密码词----------------------------------------------------
class Solution {
public:
    int uniqueMorseRepresentations(vector<string>& words) {
        string smap[26]={".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        vector<string> s;
        for(int i=0; i<words.size(); i++) 
        {
            s.push_back("");
            for(int j=0; j<words[i].size(); j++)
            {
                s[i]+=smap[words[i][j]-'a'];
            }
        }
        sort(s.begin(), s.end());
        s.erase(unique(s.begin(), s.end()), s.end());
        return s.size();
    }
};
-------------机器人能否返回原点---------------------------------------------------
class Solution {
public:
    bool judgeCircle(string moves) {
        int rightnum=0;
        int upnum=0;
        for(int i=0; i<moves.length();i++)
        {
            if(moves[i]=='\0') break;
            switch(moves[i])
            {
                case 'R':rightnum++;
                    break;
                case 'L':rightnum--;
                    break;
                case 'U':upnum++;
                    break;
                case 'D':upnum--;
                    break;
                default:  break;
                    
            }
        }
        if((rightnum==0) && (upnum==0))
            return true;
        else
            return false;
    }
};
------------ 合并二叉树-----------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1==NULL)
            return t2;
        if(t2==NULL)
            return t1;
        
        t1->val = t1->val + t2->val;
       // t1->left->val = t1->left->val + t2->left->val;
        //t1->right->val = t1->right->val + t2->right->val;
        t1->left = mergeTrees(t1->left,t2->left);
        t1->right = mergeTrees(t1->right,t2->right);
        return t1;
    }
};
---------------汉明距离-------------------------------------------------------------
class Solution {
public:
    int hammingDistance(int x, int y) {
     
        return bin(x ^ y).count('1');
    }
};
----------------按递增顺序显示卡牌----------------------------------------------------
class Solution {
public:
    vector<int> deckRevealedIncreasing(vector<int>& deck) {
        sort(deck.rbegin(),deck.rend());
        vector<int> fin;
        int len=deck.size();
        int rr=deck[0];
        for(int i=len-2;i>=0;i--){
          fin.push_back(deck[i]);
          deck.erase(deck.end());
          deck.push_back(rr);
          deck.erase(deck.begin());
          fin.push_back(deck[0]);
          deck.erase(deck.begin());
          deck.insert(deck.begin(),rr);
          deck.erase(deck.end());
           
        }
    
        return fin;
    }
};
--------------最大二叉树--------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return fin(nums, 0, nums.size() - 1);
    }
    TreeNode* fin(vector<int>& nums, int begin, int end){
        if (begin > end){
            return NULL;
        }
        if (begin == end){
            return new TreeNode(nums[begin]);
        }
        int maxNum =0, maxIndex = 0;
        for (int index = begin; index <= end; ++index){
            if (maxNum < nums[index]){
                maxNum = nums[index];
                maxIndex = index;
            }
        }
        TreeNode* root = new TreeNode(maxNum);
        root->left = fin(nums, begin, maxIndex - 1);
        root->right = fin(nums, maxIndex + 1, end);
        return root;
    }
};
------------------------括号生成------------------------------------------------------------
class Solution {
public:
   void recur(vector<string>& res, int m, int n, string s)
    {
        if (m <= 0 && n <= 0) {
            res.push_back(s);
            return;
        }
        if (m > 0)	recur(res, m - 1, n, s + '(');
        if (m < n)	recur(res, m, n - 1, s + ')');
    }

    vector<string> generateParenthesis(int n) {
        vector<string> result;
        if (n == 0) return result;
        recur(result, n, n, "");
        return result;
    }
        
};
-----------------------阶乘后的零----------------------------------------
class Solution {
public:
    int trailingZeroes(int n) {
      int fin = 0;
        while(n>=5)
        {
            fin = fin + n/5;
            n=n/5;
        }
    return fin;
    }
};
---------------------------------------增减字符串匹配------------------------------------
class Solution {
public:
    vector<int> diStringMatch(string S) {
        vector<int> N;
        int max = S.length(),min = 0,len=max;
        
        for(int i=0;i<len;i++){
            if(S[i]=='I')  N.push_back(min++);
            else        N.push_back(max--);
        }
        N.push_back((min+max)/2);
        return N;
    }
};


