二叉搜索树中第K小的元素
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> fin;
    void kth(TreeNode* root) {
        if(root!=NULL)
        {
            kth(root->left);
                fin.push_back(root->val);
            kth(root->right);
   
        }

    }
    
        int kthSmallest(TreeNode* root,int k){
        kth(root);
        return fin[k-1];
        
    }
    
};
整数反转

int reverse(int x) {
       string s = to_string(x);     
        char temp;
        int ss;
        for(int i=0;i<s.size()/2;i++){
            temp=s[i];
            s[i]=s[s.size()-i-1];
            s[s.size()-i-1]=temp;
        }
if(s==INT_MAX)
            return 0;
        stringstream ss1(s);     
        ss1>>ss;              

        if(x<0)
            ss=-ss;
        return ss;
本来打算用另一个string来装s的反转，但是总是输出不出来，应该是字符串大小匹配的问题，就直接在a自身上反转了。还有就是没有注意到要判断s大小。

-------------------------------------------------Opencv-------------------------------------------------------------
创建滑动条

#include<opencv2/opencv.hpp>
#include"opencv2/highgui/highgui.hpp"
using namespace cv;

const int g_nMaxAlphaValue =100;
int g_AlphaValueSlider;
double g_dAlphaValue;
double g_dBetaValue;

Mat g_srcImage1;
Mat g_srcImage2;
Mat g_dstImage;

void on_Trackbar(int , void*)
{
	g_dAlphaValue = (double)g_AlphaValueSlider/g_nMaxAlphaValue;
	g_dBetaValue = (1.0 - g_dAlphaValue);
	addWeighted(g_srcImage1,g_dAlphaValue,g_srcImage2,g_dBetaValue,0.0,g_dstImage);
	imshow("线性混合示例",g_dstImage);

}

int main()
{

	g_srcImage1 = imread("1.jpeg");
	g_srcImage2 = imread("2.jpeg");
	g_AlphaValueSlider = 70;
	namedWindow("线性混合示例",1);
	char TrackbarName[50];
	sprintf(TrackbarName,"透明值%d",g_nMaxAlphaValue);
	createTrackbar(TrackbarName,"线性混合示例",&g_AlphaValueSlider,g_nMaxAlphaValue,on_Trackbar);
    on_Trackbar(g_AlphaValueSlider,0);

	waitKey(0);







return 0;
}

